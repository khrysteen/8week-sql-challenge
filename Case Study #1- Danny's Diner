All datasets exist within the dannys_diner database schema - be sure to include this reference within your SQL scripts as you start exploring the data and answering the case study questions.



1. What is the total amount each customer spent at the restaurant?
**Query 1**

    SELECT 
    	customer_id, 
        SUM(price)
    FROM dannys_diner.sales s
    JOIN dannys_diner.menu m
    ON s.product_id =m.product_id
    GROUP BY customer_id;

| customer_id | sum |
| ----------- | --- |
| B           | 74  |
| C           | 36  |
| A           | 76  |

---


2. How many days has each customer visited the restaurant?

**Query 2**

    SELECT 
    	customer_id,
    	COUNT(order_date)
    FROM dannys_diner.sales
    GROUP BY customer_id;

| customer_id | count |
| ----------- | ----- |
| B           | 6     |
| C           | 3     |
| A           | 6     |

---

3. What was the first item from the menu purchased by each customer?

**Query 3**

SELECT customer_id, product_name
FROM(
SELECT
customer_id, product_name,
ROW_NUMBER() OVER (Partition by customer_id order by order_date) rownum
FROM dannys_diner.menu m
JOIN dannys_diner.sales s
ON m.product_id=s.product_id)rankedproducts
WHERE rownum =1;

---
4.What is the most purchased item on the menu and how many times was it purchased by all customers?

**Query 4**

SELECT product_name, COUNT(s.product_id) times_purchased
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
GROUP BY product_name
ORDER BY times_purchased DESC
Limit 1;

---

5.Which item was the most popular for each customer?

**Query 5**

SELECT DISTINCT ON(Customer_id) customer_id, product_name
FROM(
SELECT customer_id,product_name,  COUNT(s.product_id) times_purchased
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
GROUP BY product_name, customer_id
ORDER BY customer_id, times_purchased DESC)purchase_count

---

6. Which item was purchased first by the customer after they became a member?

**Query 6**

SELECT customer_id, product_name item_purchased_after_memberships
FROM(
SELECT s.customer_id, product_name, row_number() over(partition by s.customer_id order by order_date) rownum, order_date
FROM dannys_diner.menu m
JOIN dannys_diner.sales s
ON m.product_id = s.product_id
JOIN dannys_diner.members mm
ON s.customer_id=mm.customer_id
WHERE s.order_date >=mm.join_date) row_placement
WHERE rownum=1

---
7. Which item was purchased just before the customer became a member?

**Query 7**

SELECT customer_id, product_name item_purchased_before_membership
FROM(
SELECT s.customer_id, product_name, row_number() over(partition by s.customer_id order by order_date desc) rownum, order_date
FROM dannys_diner.menu m
JOIN dannys_diner.sales s
ON m.product_id = s.product_id
JOIN dannys_diner.members mm
ON s.customer_id=mm.customer_id
WHERE s.order_date <mm.join_date
) row_placement
WHERE rownum=1

--
8. What is the total items and amount spent for each member before they became a member?

**Query 8**

SELECT s.customer_id, COUNT(s.product_id), SUM(price)
FROM dannys_diner.menu m
FULL JOIN dannys_diner.sales s
ON m.product_id = s.product_id
FULL JOIN dannys_diner.members mm
ON s.customer_id=mm.customer_id
WHERE s.order_date <CAST(mm.join_date as DATE)
GROUP BY s.customer_id
ORDER BY s.customer_id

----
9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

**Query 9**

WITH PointsGiven AS (
SELECT product_id,
CASE WHEN product_name= 'sushi' THEN price *20
ELSE price*10 end as pricepoint
FROM dannys_diner.menu m)

SELECT customer_id, SUM(pricepoint)
FROM PointsGiven
JOIN dannys_diner.sales s
ON PointsGiven.product_id = s.product_id
GROUP BY customer_id
ORDER BY customer_id;

---
10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

**Query 10**

WITH PointsGiven AS (
SELECT s.product_id, s.customer_id, 
CASE WHEN CAST(order_date as timestamp) BETWEEN join_date AND (join_date+integer'6')
THEN price *20 
 ELSE price*10 END AS pricepoint
FROM dannys_diner.menu m
JOIN dannys_diner.sales s
ON m.product_id = s.product_id
JOIN dannys_diner.members mm
ON s.customer_id=mm.customer_id
WHERE order_date<='2021-01-31')

SELECT customer_id, SUM(pricepoint)
FROM PointsGiven
GROUP BY customer_id


**Bonus Question**

oin All The Things
The following questions are related creating basic data tables that Danny and his team can use to quickly derive insights without needing to join the underlying tables using SQL.

Recreate the following table output using the available data:

customer_id	order_date	product_name	price	member
A			2021-01-01		curry		15		N
A			2021-01-01		sushi		10		N
A			2021-01-07		curry		15		Y
A			2021-01-10		ramen		12		Y
A			2021-01-11		ramen		12		Y
A			2021-01-11		ramen		12		Y
B			2021-01-01		curry		15		N
B			2021-01-02		curry		15		N
B			2021-01-04		sushi		10		N
B			2021-01-11		sushi		10		Y
B			2021-01-16		ramen		12		Y
B			2021-02-01		ramen		12		Y
C			2021-01-01		ramen		12		N
C			2021-01-01		ramen		12		N
C			2021-01-07		ramen		12		N


			**Solution**
SELECT  s.customer_id, CAST(order_date AS DATE), product_name,price,
CASE WHEN join_date > order_date THEN 'N'
ELSE 'Y' END AS Member                      
FROM dannys_diner.menu m
LEFT JOIN dannys_diner.sales s
ON m.product_id = s.product_id
LEFT JOIN dannys_diner.members mm
ON s.customer_id=mm.customer_id
ORDER BY customer_id, order_date, product_name

---
				**Rank All The Things**
Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.

customer_id	order_date	product_name	price	member	ranking
A			2021-01-01		curry		15			N	null
A			2021-01-01		sushi		10			N	null
A			2021-01-07		curry		15			Y	1
A			2021-01-10		ramen		12			Y	2
A			2021-01-11		ramen		12			Y	3
A			2021-01-11		ramen		12			Y	3
B			2021-01-01		curry		15			N	null
B			2021-01-02		curry		15			N	null
B			2021-01-04		sushi		10			N	null
B			2021-01-11		sushi		10			Y	1
B			2021-01-16		ramen		12			Y	2
B			2021-02-01		ramen		12			Y	3
C			2021-01-01		ramen		12			N	null
C			2021-01-01		ramen		12			N	null
C			2021-01-07		ramen		12			N	null


			**Solution**
WITH CTE AS(
SELECT  s.customer_id, CAST(order_date AS DATE) order_date, product_name,price,
CASE WHEN join_date > order_date THEN 'N'
ELSE 'Y' END AS Member
FROM dannys_diner.menu m
LEFT JOIN dannys_diner.sales s
ON m.product_id = s.product_id
LEFT JOIN dannys_diner.members mm
ON s.customer_id=mm.customer_id)

SELECT *, 
CASE WHEN CTE.member='N' THEN NULL
ELSE RANK() OVER (PARTITION BY customer_id, (CASE WHEN CTE.member ='N' THEN 0 ELSE 1 END)  ORDER BY order_date) END AS ranking
FROM CTE

